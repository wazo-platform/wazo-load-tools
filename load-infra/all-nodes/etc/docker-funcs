#!/usr/bin/bash

export PRIVATE_DOCKER_REGISTRY=registry.load.wazo.io:5000

registry_list_image_tags() {
        local image=$1
        if [ -z "$image" ]; then
                echo "Error: missing the repository to list" >&2
                echo "Example: registry_list_repo_tags wlpd" >&2
        else
                curl -s -H "Accept: application/vnd.docker.distribution.manifest.v2+json" \
                        http://$PRIVATE_DOCKER_REGISTRY/v2/$image/tags/list
        fi
}

registry_get_manifest_id(){
        local image=$1
        local tag=$2
        if [ -z "$tag" ] || [ -z $image ];then
                echo "Error while invoking registry_get_manifest_id" >&2
                echo "Usage: registry_get_manifest_id <IMAGE> <TAG>" >&2
                echo "Usage: registry_get_manifest_id wlpd 1.0.3" >&2
        else
        curl -s -I -H "Accept: application/vnd.docker.distribution.manifest.v2+json" \
                http://$PRIVATE_DOCKER_REGISTRY/v2/$image/manifests/$tag | \
                grep Docker-Content-Digest| awk '{print $2}'
        fi
}

registry_get_manifest(){
        local image=$1
        local tag=$2
        if [ -z "$tag" ] || [ -z $image ];then
                echo "Error while invoking registry_get_manifest" >&2
                echo "Usage: registry_get_manifest <IMAGE> <TAG>" >&2
                echo "Usage: registry_get_manifest wlpd 1.0.3" >&2
        else
                curl -s -H "Accept: application/vnd.docker.distribution.manifest.v2+json" \
                        http://$PRIVATE_DOCKER_REGISTRY/v2/$image/manifests/$tag
        fi
}

registry_get_image_label(){
        local image=$1
        local tag=$2
        if [ -z "$tag" ] || [ -z $image ];then
                echo "Error while invoking registry_get_image_labels" >&2
                echo "Usage: registry_get_image_labels <IMAGE> <TAG>" >&2
                echo "Usage: registry_get_image_labels wlpd 1.0.3" >&2
        else
                MANIFEST=$(registry_get_manifest $image $tag)
                ERRORS=$(echo $MANIFEST|jq .errors)
                if [ "$(echo "$ERRORS" | jq 'length')" -eq 0 ]; then
                        CONFIG_DIGEST=$(echo $MANIFEST |jq -r '.config.digest')
                        curl -s http://$PRIVATE_DOCKER_REGISTRY/v2/$image/blobs/$CONFIG_DIGEST |\
                                jq .config.Labels
                else
                        echo $MANIFEST | jq .errors >&2
                fi

        fi
}

registry_update_image_labels(){
        local image=$1
        local tag=$2
        local labels=$3
        if [ -z "$tag" ] || [ -z "$image" ] || [ -z "$labels" ];then
                echo "Error while invoking registry_update_image_labels" >&2
                echo "Usage: registry_update_image_labels <IMAGE> <TAG> <JSON_LABELS>" >&2
                echo "Usage: registry_update-image-labels wlpd 1.0.3 'maintainer=devloppers@wazo.io image_status=donotuse'" >&2
        else
                registry_pull_image $image:$tag
                docker run --name temp_container  $image:$tag echo "Image with labels"
                docker commit --change "LABEL $labels" temp_container $image:$tag
                docker rm temp_container
                docker inspect --format='{{json .Config.Labels}}' $image:$tag | jq .
                registry_push_image $image:$tag

        fi

}

registry_pull_image(){
        local image=$1
        if [ -z "$image" ];then
                echo "Error while invoking registry_pull_image" >&2
                echo "Usage: registry_pull_image <IMAGE>:<TAG>" >&2
                echo "Usage: registry_pull_image wlpd:1.0.3" >&2
        else
                docker pull $PRIVATE_DOCKER_REGISTRY/$image
                docker tag  $PRIVATE_DOCKER_REGISTRY/$image $image
        fi
}
alias dpull="registry_pull_image"

registry_push_image(){
        local image=$1
        if [ -z "$image" ];then
                echo "Error while invoking registry-push-image" >&2
                echo "Usage: registry_push_image <IMAGE>:<TAG>" >&2
                echo "Usage: registry_push_image wlpd:1.0.3" >&2
        else
                docker tag  $image $PRIVATE_DOCKER_REGISTRY/$image
                docker push $PRIVATE_DOCKER_REGISTRY/$image
        fi
}
alias dpush="registry_push_image"

alias registry_list_images="curl -s -X GET http://$PRIVATE_DOCKER_REGISTRY/v2/_catalog| jq ."

registry_detail_running_images(){
        local images=$(docker ps --format '{{json .}}' | jq -s -r .[].Image)
        for string in $images;do
                image="${string%:*}";
                tag="${string##*:}"
                registry_get_image_label $image $tag
        done
}
