#!/bin/bash 

if [ $# -ne 2 ]; then
    echo "missing sequence parameter"
    echo "usage ./usergen.sh SEQ PARAMS_FILE"
    echo "example ./usergen.sh 134 usergen_params.json" 
    exit 2
fi

# user_gen is aimed to create the json file representing a user.
user_gen () {
    local SEQUENCE=$1
    local USERNAME=$(tr -dc A-Za-z0-9 < /dev/urandom|head -c 5)
    local PASSWORD=$(tr -dc A-Za-z0-9 < /dev/urandom|head -c 5)
    local EXTENSION=$(echo 1000+$SEQUENCE|bc)
    local USERS_CSV=users/users.csv

    echo "$USERNAME;$PASSWORD;$EXTENSION" >> $USERS_CSV

    cp user.json.tpl users/$EXTENSION.json

    sed  -i "s/__SEQUENCE__/$SEQUENCE/g" users/$EXTENSION.json
    sed  -i "s/__USERNAME__/$USERNAME/g" users/$EXTENSION.json
    sed  -i "s/__PASSWORD__/$PASSWORD/g" users/$EXTENSION.json
    sed  -i "s/__EXTENSION__/$EXTENSION/g" users/$EXTENSION.json

    echo users/$EXTENSION.json
}

# push_users is aimed to create the user into a specific stack by calling the API
# and posting the JSON generated by the user_gen func.
# you'll need to specify the stack IP, a valid token that should be generated before
# using this script and the tenant uuid specific to the stack as well.
push_users () {
    local tenant_uuid=$1
    local token=$2
    local stack_ip=$3
    local user_file=$4

    curl -k -v -X POST "https://$stack_ip:443/api/confd/1.1/users" \
        --header "Content-Type: application/json" \
        --header "Accept: application/json" \
        --header "Wazo-Tenant: $tenant_uuid" \
        --header "X-Auth-Token: $token" \
        --data @$user_file  
        
}

SEQ=$1
PARAMS=$2
UUID=$(jq  -r .uuid $PARAMS)
TOKEN=$(jq -r .token $PARAMS)
STACK_IP=$(jq  -r .ip $PARAMS)

JSON=$(user_gen $SEQ)
push_users $UUID $TOKEN $STACK_IP $JSON